name: Cross - Build and Test

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: actions/setup-cmake@v1
        with:
          cmake-version: '3.31'

      - name: Configure CMake
        run: cmake -S crossbuild -B build  # 指定源码目录为 crossbuild

      - name: Build
        run: cmake --build build --config Release

      - name: Run executable and capture output
        id: run
        shell: bash
        run: |
          # 确定可执行文件路径（根据操作系统调整）
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXECUTABLE="./build/Release/crossbuild.exe"  # Windows 可执行文件
          else
            EXECUTABLE="./build/crossbuild"  # Linux/macOS 可执行文件
          fi
          
          # 确保可执行文件存在
          if [ -f "$EXECUTABLE" ]; then
            # 运行程序并将输出和错误重定向到文件
            "$EXECUTABLE" > output.txt 2>&1
            echo "程序运行成功"
            echo "exit_code=0" >> $GITHUB_ENV
          else
            echo "可执行文件未找到" > output.txt
            echo "exit_code=1" >> $GITHUB_ENV
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: crossbuild-${{ matrix.os }}  # 重命名 artifact
          path: |
            build/crossbuild
            build/Release/crossbuild.exe
            output.txt
          retention-days: 7

      - name: Fail if execution failed
        if: env.exit_code != '0'
        run: exit ${{ env.exit_code }}